// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handlers/callbackhandler/services.go

// Package callbackhandler is a generated GoMock package.
package callbackhandler

import (
	context "context"
	reflect "reflect"

	e "github.com/evt/callback/internal/e"
	model "github.com/evt/callback/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockObjectService is a mock of ObjectService interface.
type MockObjectService struct {
	ctrl     *gomock.Controller
	recorder *MockObjectServiceMockRecorder
}

// MockObjectServiceMockRecorder is the mock recorder for MockObjectService.
type MockObjectServiceMockRecorder struct {
	mock *MockObjectService
}

// NewMockObjectService creates a new mock instance.
func NewMockObjectService(ctrl *gomock.Controller) *MockObjectService {
	mock := &MockObjectService{ctrl: ctrl}
	mock.recorder = &MockObjectServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectService) EXPECT() *MockObjectServiceMockRecorder {
	return m.recorder
}

// UpdateObject mocks base method.
func (m *MockObjectService) UpdateObject(ctx context.Context, object *model.DBObject) e.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateObject", ctx, object)
	ret0, _ := ret[0].(e.Error)
	return ret0
}

// UpdateObject indicates an expected call of UpdateObject.
func (mr *MockObjectServiceMockRecorder) UpdateObject(ctx, object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObject", reflect.TypeOf((*MockObjectService)(nil).UpdateObject), ctx, object)
}

// MockTesterService is a mock of TesterService interface.
type MockTesterService struct {
	ctrl     *gomock.Controller
	recorder *MockTesterServiceMockRecorder
}

// MockTesterServiceMockRecorder is the mock recorder for MockTesterService.
type MockTesterServiceMockRecorder struct {
	mock *MockTesterService
}

// NewMockTesterService creates a new mock instance.
func NewMockTesterService(ctrl *gomock.Controller) *MockTesterService {
	mock := &MockTesterService{ctrl: ctrl}
	mock.recorder = &MockTesterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTesterService) EXPECT() *MockTesterServiceMockRecorder {
	return m.recorder
}

// GetObject mocks base method.
func (m *MockTesterService) GetObject(ctx context.Context, objectID uint) (model.TesterObject, e.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", ctx, objectID)
	ret0, _ := ret[0].(model.TesterObject)
	ret1, _ := ret[1].(e.Error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockTesterServiceMockRecorder) GetObject(ctx, objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockTesterService)(nil).GetObject), ctx, objectID)
}
