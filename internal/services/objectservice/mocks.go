// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/objectservice/repositories.go

// Package objectservice is a generated GoMock package.
package objectservice

import (
	context "context"
	reflect "reflect"

	model "github.com/evt/callback/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockObjectRepository is a mock of ObjectRepository interface.
type MockObjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockObjectRepositoryMockRecorder
}

// MockObjectRepositoryMockRecorder is the mock recorder for MockObjectRepository.
type MockObjectRepositoryMockRecorder struct {
	mock *MockObjectRepository
}

// NewMockObjectRepository creates a new mock instance.
func NewMockObjectRepository(ctrl *gomock.Controller) *MockObjectRepository {
	mock := &MockObjectRepository{ctrl: ctrl}
	mock.recorder = &MockObjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectRepository) EXPECT() *MockObjectRepositoryMockRecorder {
	return m.recorder
}

// UpdateObject mocks base method.
func (m *MockObjectRepository) UpdateObject(arg0 context.Context, arg1 *model.DBObject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateObject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateObject indicates an expected call of UpdateObject.
func (mr *MockObjectRepositoryMockRecorder) UpdateObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObject", reflect.TypeOf((*MockObjectRepository)(nil).UpdateObject), arg0, arg1)
}
